#!/usr/bin/env python -u

import argparse
import logging
import sys
import os
from subprocess import Popen, PIPE
import subprocess

formatter = logging.Formatter()
logging.basicConfig(stream=sys.stdout, level=logging.INFO,
                    format='%(levelname)s: %(name)s: %(message)s')
log = logging.getLogger('docker-run')


parser = argparse.ArgumentParser(
    description='Start a container with the specified image.')
parser.add_argument('image', help='the image to run')
parser.add_argument('command', help='the command to run')
args = parser.parse_args()


possible_opts = ['add-host', 'blkio-weight', 'cap-add', 'cap-drop', 'cidfile',
                 'cpu-shares', 'cpu-period', 'cpuset-cpus', 'cpuset-mems',
                 'cpu-quota', 'detach', 'device', 'dns', 'env', 'interactive', 'ipc',
                 'label', 'log-driver', 'log-opt', 'lxc-conf', 'memory',
                 'memory-swap', 'name', 'net', 'oom-kill-disable', 'publish',
                 'privileged', 'restart', 'rm', 'security-opt',
                 'volume', 'volume-from', 'ulimit', 'uts',
                 'interactive', 'tty']
OPTIONS = []
for opt in possible_opts:
    env_var_name = "RD_CONFIG_" + opt.upper().replace('-', '_')
    if env_var_name in os.environ:
        OPTIONS.append("--%s=%s" % (opt, os.environ[env_var_name]))
        log.debug("appended option: --%s=%s" % (opt, os.environ[env_var_name]))


if "RD_CONFIG_DOCKER_HOST" in os.environ:
    os.environ["DOCKER_HOST"] = os.environ["RD_CONFIG_DOCKER_HOST"]
    log.info("DOCKER_HOST set to " + os.environ["RD_CONFIG_DOCKER_HOST"])
else:
    log.debug("RD_CONFIG_DOCKER_HOST environment variable not defined.")

if "RD_CONFIG_DOCKER_CERT_PATH" in os.environ:
    os.environ["DOCKER_CERT_PATH"] = os.environ["RD_CONFIG_DOCKER_CERT_PATH"]
    log.info("DOCKER_CERT_PATH=" + os.environ["RD_CONFIG_DOCKER_CERT_PATH"])
    if "RD_CONFIG_DOCKER_TLS_VERIFY" in os.environ:
        os.environ["DOCKER_TLS_VERIFY"] = os.environ["RD_CONFIG_DOCKER_TLS_VERIFY"]
        log.info("DOCKER_TLS_VERIFY=" + os.environ["RD_CONFIG_DOCKER_TLS_VERIFY"])
    else:
        log.debug("RD_CONFIG_DOCKER_TLS_VERIFY environment variable not defined.")

if args.command in {'${option.command}', '${config.command}'}:
    args.command = None

COMMAND = ['docker', 'run']
COMMAND.extend(OPTIONS)
COMMAND.append(args.image)

if args.command is not None:
    COMMAND.append(args.command)

command_string = " ".join(COMMAND)
log.info("Executing: '" + command_string + "' ...")
# exitcode = subprocess.check_output(command_string, shell=True)
p = Popen(command_string, shell=True, stdout=PIPE, stderr=PIPE)
exitcode = p.wait()
print p.stdout.read()
if exitcode != 0:
    log.error("Command execution failed with exit code: %s" % str(exitcode))

# done
sys.exit(exitcode)
